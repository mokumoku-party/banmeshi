// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/helthcheck_service.proto

package serviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	grpc "github.com/mokumoku-party/banmeshi/server/pkg/grpc"
	service "github.com/mokumoku-party/banmeshi/server/pkg/grpc/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// helthcheckName is the fully-qualified name of the helthcheck service.
	helthcheckName = "helthcheck"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HelthcheckCheckDatabaseStatusProcedure is the fully-qualified name of the helthcheck's
	// checkDatabaseStatus RPC.
	HelthcheckCheckDatabaseStatusProcedure = "/helthcheck/checkDatabaseStatus"
)

// HelthcheckClient is a client for the helthcheck service.
type HelthcheckClient interface {
	// データベースとの接続状況を確認する
	CheckDatabaseStatus(context.Context, *connect_go.Request[grpc.Void]) (*connect_go.Response[service.Status], error)
}

// NewHelthcheckClient constructs a client for the helthcheck service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHelthcheckClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HelthcheckClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &helthcheckClient{
		checkDatabaseStatus: connect_go.NewClient[grpc.Void, service.Status](
			httpClient,
			baseURL+HelthcheckCheckDatabaseStatusProcedure,
			opts...,
		),
	}
}

// helthcheckClient implements HelthcheckClient.
type helthcheckClient struct {
	checkDatabaseStatus *connect_go.Client[grpc.Void, service.Status]
}

// CheckDatabaseStatus calls helthcheck.checkDatabaseStatus.
func (c *helthcheckClient) CheckDatabaseStatus(ctx context.Context, req *connect_go.Request[grpc.Void]) (*connect_go.Response[service.Status], error) {
	return c.checkDatabaseStatus.CallUnary(ctx, req)
}

// HelthcheckHandler is an implementation of the helthcheck service.
type HelthcheckHandler interface {
	// データベースとの接続状況を確認する
	CheckDatabaseStatus(context.Context, *connect_go.Request[grpc.Void]) (*connect_go.Response[service.Status], error)
}

// NewHelthcheckHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHelthcheckHandler(svc HelthcheckHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	helthcheckCheckDatabaseStatusHandler := connect_go.NewUnaryHandler(
		HelthcheckCheckDatabaseStatusProcedure,
		svc.CheckDatabaseStatus,
		opts...,
	)
	return "/helthcheck/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HelthcheckCheckDatabaseStatusProcedure:
			helthcheckCheckDatabaseStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHelthcheckHandler returns CodeUnimplemented from all methods.
type UnimplementedHelthcheckHandler struct{}

func (UnimplementedHelthcheckHandler) CheckDatabaseStatus(context.Context, *connect_go.Request[grpc.Void]) (*connect_go.Response[service.Status], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("helthcheck.checkDatabaseStatus is not implemented"))
}
